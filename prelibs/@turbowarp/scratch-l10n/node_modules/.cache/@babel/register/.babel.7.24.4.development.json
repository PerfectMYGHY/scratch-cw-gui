{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\PerfectMYGHY\\\\scratch\\\\node_modules\\\\scratch-gui\\\\node_modules\\\\@turbowarp\\\\scratch-l10n\\\\scripts\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\PerfectMYGHY\\\\scratch\\\\node_modules\\\\scratch-gui\\\\node_modules\\\\@turbowarp\\\\scratch-l10n\",\"filename\":\"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\PerfectMYGHY\\\\scratch\\\\node_modules\\\\scratch-gui\\\\node_modules\\\\@turbowarp\\\\scratch-l10n\\\\scripts\\\\tw-pull.js\",\"targets\":{\"chrome\":\"70.0.0\",\"edge\":\"18.0.0\",\"firefox\":\"68.0.0\",\"ios\":\"12.0.0\",\"safari\":\"12.0.0\"},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\PerfectMYGHY\\\\scratch\\\\node_modules\\\\scratch-gui\\\\node_modules\\\\@turbowarp\\\\scratch-l10n\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.24.4:development":{"value":{"code":"#!/usr/bin/env babel-node\nimport pathUtil from 'node:path';\nimport fs from 'node:fs';\nimport { txPull, txGetResourceStatistics } from '../lib/transifex';\nimport { supportedLocales, scratchToTransifex } from './tw-locales';\nimport { batchMap } from '../lib/batch.js';\n\n/* eslint-disable valid-jsdoc */\n\nconst PROJECT = 'turbowarp';\nconst CONCURRENCY_LIMIT = 36;\nconst SOURCE_LOCALE = 'en';\n\n/**\n * Not sure how to do this in JSDoc\n * @template T\n * @typedef {Record<string, T>} NestedRecord<T>\n */\n\n/**\n * Normalizes messages in the following ways by converting objects with context to just strings,\n * and ensures that the order of keys is consistent.\n * @param {NestedRecord<string | {string: string}>} messages\n * @returns {NestedRecord<string>}\n */\nconst normalizeMessages = messages => {\n  const result = {};\n  for (const id of Object.keys(messages).sort()) {\n    const string = messages[id];\n    if (typeof string === 'string') {\n      // Don't touch normal strings.\n      result[id] = string;\n    } else if (typeof string.string === 'string') {\n      // Convert structured strings with context to normal strings.\n      result[id] = string.string;\n    } else {\n      // Recurse into nested message objects.\n      result[id] = normalizeMessages(string);\n    }\n  }\n  return result;\n};\n\n/**\n * @param {NestedRecord<string>} localeMessages\n * @param {NestedRecord<string>} sourceMessages\n * @returns {NestedRecord<string>}\n */\nconst removeRedundantMessages = (localeMessages, sourceMessages) => {\n  const result = {};\n  for (const [messageId, messageContent] of Object.entries(localeMessages)) {\n    const string = messageContent;\n    const sourceString = sourceMessages[messageId];\n    if (typeof string === 'string') {\n      // Copy strings that do not exactly match their English counterpart.\n      if (string !== sourceString) {\n        result[messageId] = string;\n      }\n    } else {\n      // Recurse into nested objects.\n      const nested = removeRedundantMessages(string, sourceString);\n      if (Object.keys(nested).length !== 0) {\n        result[messageId] = nested;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * @param {string[]} locales\n */\nconst createProgressPrinter = locales => {\n  const RESET = `\\u001b[0m`;\n  const BOLD = `\\u001b[1m`;\n  const GRAY = '\\u001b[90m';\n  const BLUE = `\\u001b[34m`;\n  const GREEN = '\\u001b[32m';\n  const CLEAR = '\\u001b[0k';\n  const NOT_STARTED = 0;\n  const STARTED = 1;\n  const FINISHED = 2;\n  let ended = false;\n  const states = {};\n  for (const locale of locales) {\n    states[locale] = NOT_STARTED;\n  }\n  const print = () => {\n    if (ended) {\n      return;\n    }\n    const items = Object.entries(states).map(([locale, state]) => {\n      let color = '??';\n      if (state === NOT_STARTED) color = GRAY;\n      if (state === STARTED) color = BLUE;\n      if (state === FINISHED) color = BOLD + GREEN;\n      return `${color}${locale}${RESET}`;\n    });\n    const total = locales.length;\n    const totalFinished = Object.values(states).filter(i => i === FINISHED).length;\n    process.stdout.write(`\\r${CLEAR}${items.join(' ')}${RESET} ${totalFinished}/${total}`);\n  };\n  const startedItem = locale => {\n    states[locale] = STARTED;\n    print();\n  };\n  const finishedItem = locale => {\n    states[locale] = FINISHED;\n    print();\n  };\n  const end = () => {\n    ended = true;\n    // Move cursor to own line.\n    console.log('');\n  };\n  print();\n  return {\n    startedItem,\n    finishedItem,\n    end\n  };\n};\n\n/**\n * @param {string} resource Name of Transifex resource\n * @param {number} requiredCompletion Number from 0-1 indicating what % of strings must be translated.\n *  Locales that do not meet this threshold will not be included in the result.\n * @returns {Promise<Record<string, Record<string, string>>} Does not include source messages.\n */\nconst pullResource = async (resource, requiredCompletion) => {\n  console.log(`Pulling ${resource}...`);\n  const transifexStatistics = await txGetResourceStatistics(PROJECT, resource);\n  const totalStrings = transifexStatistics[SOURCE_LOCALE];\n  const threshold = Math.max(1, Math.round(totalStrings * requiredCompletion));\n  const localesToFetch = Object.keys(supportedLocales).filter(locale => {\n    const transifexLocale = scratchToTransifex[locale] || locale;\n    const translatedStrings = transifexStatistics[transifexLocale];\n    if (typeof translatedStrings !== 'number') {\n      throw new Error(`Missing locale ${supportedLocales[locale].name} (${locale}) in ${resource}`);\n    }\n    return translatedStrings >= threshold;\n  });\n  const progress = createProgressPrinter(localesToFetch);\n  const values = await batchMap(localesToFetch, CONCURRENCY_LIMIT, async locale => {\n    progress.startedItem(locale);\n    try {\n      const messages = await txPull(PROJECT, resource, scratchToTransifex[locale] || locale);\n      progress.finishedItem(locale);\n      return {\n        scratchLocale: locale,\n        messages: normalizeMessages(messages)\n      };\n    } catch (error) {\n      progress.end();\n      // Transifex's error messages sometimes lack enough detail, so we will include\n      // some extra information.\n      console.error(`Could not fetch messages for locale: ${locale}`);\n      throw error;\n    }\n  });\n  const sourceMessages = values.find(i => i.scratchLocale === SOURCE_LOCALE).messages;\n  const result = {};\n  for (const pulled of values) {\n    const slimmedMessages = removeRedundantMessages(pulled.messages, sourceMessages);\n    if (Object.keys(slimmedMessages).length > 0) {\n      result[pulled.scratchLocale.toLowerCase()] = slimmedMessages;\n    }\n  }\n  progress.end();\n  return result;\n};\n\n/**\n * @param {string} path\n * @returns {boolean}\n */\nconst isDirectorySync = path => {\n  try {\n    const stat = fs.statSync(path);\n    return stat.isDirectory();\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return false;\n    }\n    throw e;\n  }\n};\n\n/**\n * @param {NestedRecord<string, string>} messages\n * @returns {Record<string, string>}\n */\nconst generateSmallestLocaleNamesMap = messages => {\n  const lowercaseSupportedLocales = {};\n  for (const [locale, value] of Object.entries(supportedLocales)) {\n    lowercaseSupportedLocales[locale.toLowerCase()] = value;\n  }\n  const result = {\n    [SOURCE_LOCALE]: supportedLocales[SOURCE_LOCALE].name\n  };\n  for (const locale of Object.keys(messages)) {\n    result[locale] = lowercaseSupportedLocales[locale].name;\n  }\n  return result;\n};\nconst pullGui = async () => {\n  const scratchGui = pathUtil.join(__dirname, '../../scratch-gui');\n  if (!isDirectorySync(scratchGui)) {\n    console.log('Skipping editor; could not find scratch-gui.');\n    return;\n  }\n  const guiTranslationsFile = pathUtil.join(scratchGui, 'src/lib/tw-translations/generated-translations.json');\n  // These translations build upon scratch-l10n, so the threshold should be 0.\n  const guiTranslations = await pullResource('guijson', 0);\n  fs.writeFileSync(guiTranslationsFile, JSON.stringify(guiTranslations, null, 4));\n  const addonsTranslationsFile = pathUtil.join(scratchGui, 'src/addons/settings/translations.json');\n  const addonsTranslations = await pullResource('addonsjson', 0.7);\n  fs.writeFileSync(addonsTranslationsFile, JSON.stringify(addonsTranslations, null, 4));\n};\nconst pullPackager = async () => {\n  const packager = pathUtil.join(__dirname, '../../packager');\n  if (!isDirectorySync(packager)) {\n    console.log('Skipping packager; could not find packager.');\n    return;\n  }\n  const translations = await pullResource('packagerjson', 0.5);\n\n  // Delete old JSON files. Some languages that were previously supported might no longer be.\n  const localesDirectory = pathUtil.join(packager, 'src', 'locales');\n  for (const name of fs.readdirSync(localesDirectory)) {\n    if (name.endsWith('.json') && name !== 'en.json') {\n      fs.unlinkSync(pathUtil.join(localesDirectory, name));\n    }\n  }\n\n  // Write the individual JSON files\n  for (const [locale, messages] of Object.entries(translations)) {\n    const path = pathUtil.join(localesDirectory, `${locale}.json`);\n    fs.writeFileSync(path, JSON.stringify(messages, null, 4));\n  }\n\n  // Write the index.js manifest\n  const index = pathUtil.join(localesDirectory, 'index.js');\n  const oldContent = fs.readFileSync(index, 'utf-8');\n  const newContent = oldContent.replace(/\\/\\*===\\*\\/[\\s\\S]+\\/\\*===\\*\\//m, `/*===*/\\n${Object.keys(translations).map(i => `  ${JSON.stringify(i)}: () => require(${JSON.stringify(`./${i}.json`)})`).join(',\\n')},\\n  /*===*/`);\n  fs.writeFileSync(index, newContent);\n\n  // Write locale-names.json\n  const localeNames = generateSmallestLocaleNamesMap(translations);\n  fs.writeFileSync(pathUtil.join(localesDirectory, 'locale-names.json'), JSON.stringify(localeNames, null, 4));\n};\nconst pullDesktop = async () => {\n  const desktop = pathUtil.join(__dirname, '../../turbowarp-desktop');\n  if (!isDirectorySync(desktop)) {\n    console.log('Skipping desktop; could not find turbowarp-desktop.');\n    return;\n  }\n\n  // Desktop app translations\n  const desktopTranslations = await pullResource('desktopnewjson', 0.5);\n  fs.writeFileSync(pathUtil.join(desktop, 'src-main/l10n/generated-translations.json'), JSON.stringify(desktopTranslations, null, 4));\n\n  // Website translations\n  const webTranslations = await pullResource('desktopturbowarporg-redesign', 0.7);\n  const localeNames = generateSmallestLocaleNamesMap(webTranslations);\n  const indexHtml = pathUtil.join(desktop, 'docs', 'index.html');\n  const oldContent = fs.readFileSync(indexHtml, 'utf-8');\n  const newContent = oldContent.replace(/ *<!-- L10N_START -->[\\s\\S]*?<!-- L10N_END -->/gm, ['<!-- L10N_START -->', ...Object.entries(webTranslations).map(([locale, data]) => `<script type=\"generated-translations\" data-locale=\"${locale}\">${JSON.stringify(data)}</script>`), '<!-- L10N_END -->'].map(line => `    ${line}`).join('\\n')).replace(/<script type=\"generated-locale-names\">[\\s\\S]+?<\\/script>/, `<script type=\"generated-locale-names\">${JSON.stringify(localeNames)}</script>`);\n  fs.writeFileSync(indexHtml, newContent);\n  const storeListings = await pullResource('store-listingsyaml', 1);\n  fs.writeFileSync(pathUtil.join(desktop, 'store-listings/imported.json'), JSON.stringify(storeListings, null, 4));\n};\nconst pullExtensions = async () => {\n  const extensions = pathUtil.join(__dirname, '../../extensions');\n  if (!isDirectorySync(extensions)) {\n    console.log('Skipping extensions; could not find extensions.');\n    return;\n  }\n  const metadataTranslations = await pullResource('extension-metadata', 0);\n  fs.writeFileSync(pathUtil.join(extensions, 'translations/extension-metadata.json'), JSON.stringify(metadataTranslations, null, 4));\n  const runtimeTranslations = await pullResource('extensions', 0);\n  fs.writeFileSync(pathUtil.join(extensions, 'translations/extension-runtime.json'), JSON.stringify(runtimeTranslations, null, 4));\n};\nconst pullEverything = async () => {\n  try {\n    console.log('DOWNLOADING from Transifex...');\n    await pullGui();\n    await pullPackager();\n    await pullDesktop();\n    await pullExtensions();\n  } catch (e) {\n    console.error(e);\n    process.exit(1);\n  }\n};\npullEverything();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["pathUtil","fs","txPull","txGetResourceStatistics","supportedLocales","scratchToTransifex","batchMap","PROJECT","CONCURRENCY_LIMIT","SOURCE_LOCALE","normalizeMessages","messages","result","id","Object","keys","sort","string","removeRedundantMessages","localeMessages","sourceMessages","messageId","messageContent","entries","sourceString","nested","length","createProgressPrinter","locales","RESET","BOLD","GRAY","BLUE","GREEN","CLEAR","NOT_STARTED","STARTED","FINISHED","ended","states","locale","print","items","map","state","color","total","totalFinished","values","filter","i","process","stdout","write","join","startedItem","finishedItem","end","console","log","pullResource","resource","requiredCompletion","transifexStatistics","totalStrings","threshold","Math","max","round","localesToFetch","transifexLocale","translatedStrings","Error","name","progress","scratchLocale","error","find","pulled","slimmedMessages","toLowerCase","isDirectorySync","path","stat","statSync","isDirectory","e","code","generateSmallestLocaleNamesMap","lowercaseSupportedLocales","value","pullGui","scratchGui","__dirname","guiTranslationsFile","guiTranslations","writeFileSync","JSON","stringify","addonsTranslationsFile","addonsTranslations","pullPackager","packager","translations","localesDirectory","readdirSync","endsWith","unlinkSync","index","oldContent","readFileSync","newContent","replace","localeNames","pullDesktop","desktop","desktopTranslations","webTranslations","indexHtml","data","line","storeListings","pullExtensions","extensions","metadataTranslations","runtimeTranslations","pullEverything","exit"],"sourceRoot":"C:\\Users\\Administrator\\source\\repos\\PerfectMYGHY\\scratch\\node_modules\\scratch-gui\\node_modules\\@turbowarp\\scratch-l10n\\scripts\\","sources":["tw-pull.js"],"sourcesContent":["#!/usr/bin/env babel-node\n\nimport pathUtil from 'node:path';\nimport fs from 'node:fs';\nimport {txPull, txGetResourceStatistics} from '../lib/transifex';\nimport {supportedLocales, scratchToTransifex} from './tw-locales';\nimport {batchMap} from '../lib/batch.js';\n\n/* eslint-disable valid-jsdoc */\n\nconst PROJECT = 'turbowarp';\nconst CONCURRENCY_LIMIT = 36;\nconst SOURCE_LOCALE = 'en';\n\n/**\n * Not sure how to do this in JSDoc\n * @template T\n * @typedef {Record<string, T>} NestedRecord<T>\n */\n\n/**\n * Normalizes messages in the following ways by converting objects with context to just strings,\n * and ensures that the order of keys is consistent.\n * @param {NestedRecord<string | {string: string}>} messages\n * @returns {NestedRecord<string>}\n */\nconst normalizeMessages = messages => {\n    const result = {};\n    for (const id of Object.keys(messages).sort()) {\n        const string = messages[id];\n        if (typeof string === 'string') {\n            // Don't touch normal strings.\n            result[id] = string;\n        } else if (typeof string.string === 'string') {\n            // Convert structured strings with context to normal strings.\n            result[id] = string.string;\n        } else {\n            // Recurse into nested message objects.\n            result[id] = normalizeMessages(string);\n        }\n    }\n    return result;\n};\n\n/**\n * @param {NestedRecord<string>} localeMessages\n * @param {NestedRecord<string>} sourceMessages\n * @returns {NestedRecord<string>}\n */\nconst removeRedundantMessages = (localeMessages, sourceMessages) => {\n    const result = {};\n    for (const [messageId, messageContent] of Object.entries(localeMessages)) {\n        const string = messageContent;\n        const sourceString = sourceMessages[messageId];\n        if (typeof string === 'string') {\n            // Copy strings that do not exactly match their English counterpart.\n            if (string !== sourceString) {\n                result[messageId] = string;\n            }\n        } else {\n            // Recurse into nested objects.\n            const nested = removeRedundantMessages(string, sourceString);\n            if (Object.keys(nested).length !== 0) {\n                result[messageId] = nested;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * @param {string[]} locales\n */\nconst createProgressPrinter = locales => {\n    const RESET = `\\u001b[0m`;\n    const BOLD = `\\u001b[1m`;\n    const GRAY = '\\u001b[90m';\n    const BLUE = `\\u001b[34m`;\n    const GREEN = '\\u001b[32m';\n    const CLEAR = '\\u001b[0k';\n\n    const NOT_STARTED = 0;\n    const STARTED = 1;\n    const FINISHED = 2;\n\n    let ended = false;\n    const states = {};\n    for (const locale of locales) {\n        states[locale] = NOT_STARTED;\n    }\n\n    const print = () => {\n        if (ended) {\n            return;\n        }\n        const items = Object.entries(states).map(([locale, state]) => {\n            let color = '??';\n            if (state === NOT_STARTED) color = GRAY;\n            if (state === STARTED) color = BLUE;\n            if (state === FINISHED) color = BOLD + GREEN;\n            return `${color}${locale}${RESET}`;\n        });\n        const total = locales.length;\n        const totalFinished = Object.values(states).filter(i => i === FINISHED).length;\n        process.stdout.write(`\\r${CLEAR}${items.join(' ')}${RESET} ${totalFinished}/${total}`);\n    };\n\n    const startedItem = locale => {\n        states[locale] = STARTED;\n        print();\n    };\n\n    const finishedItem = locale => {\n        states[locale] = FINISHED;\n        print();\n    };\n\n    const end = () => {\n        ended = true;\n        // Move cursor to own line.\n        console.log('');\n    };\n\n    print();\n    return {\n        startedItem,\n        finishedItem,\n        end\n    };\n};\n\n/**\n * @param {string} resource Name of Transifex resource\n * @param {number} requiredCompletion Number from 0-1 indicating what % of strings must be translated.\n *  Locales that do not meet this threshold will not be included in the result.\n * @returns {Promise<Record<string, Record<string, string>>} Does not include source messages.\n */\nconst pullResource = async (resource, requiredCompletion) => {\n    console.log(`Pulling ${resource}...`);\n\n    const transifexStatistics = await txGetResourceStatistics(PROJECT, resource);\n    const totalStrings = transifexStatistics[SOURCE_LOCALE];\n    const threshold = Math.max(1, Math.round(totalStrings * requiredCompletion));\n    const localesToFetch = Object.keys(supportedLocales).filter(locale => {\n        const transifexLocale = scratchToTransifex[locale] || locale;\n        const translatedStrings = transifexStatistics[transifexLocale];\n        if (typeof translatedStrings !== 'number') {\n            throw new Error(`Missing locale ${supportedLocales[locale].name} (${locale}) in ${resource}`);\n        }\n        return translatedStrings >= threshold;\n    });\n\n    const progress = createProgressPrinter(localesToFetch);\n\n    const values = await batchMap(localesToFetch, CONCURRENCY_LIMIT, async locale => {\n        progress.startedItem(locale);\n        try {\n            const messages = await txPull(PROJECT, resource, scratchToTransifex[locale] || locale);\n            progress.finishedItem(locale);\n            return {\n                scratchLocale: locale,\n                messages: normalizeMessages(messages)\n            };\n        } catch (error) {\n            progress.end();\n            // Transifex's error messages sometimes lack enough detail, so we will include\n            // some extra information.\n            console.error(`Could not fetch messages for locale: ${locale}`);\n            throw error;\n        }\n    });\n\n    const sourceMessages = values.find(i => i.scratchLocale === SOURCE_LOCALE).messages;\n    const result = {};\n    for (const pulled of values) {\n        const slimmedMessages = removeRedundantMessages(pulled.messages, sourceMessages);\n        if (Object.keys(slimmedMessages).length > 0) {\n            result[pulled.scratchLocale.toLowerCase()] = slimmedMessages;\n        }\n    }\n\n    progress.end();\n    return result;\n};\n\n/**\n * @param {string} path\n * @returns {boolean}\n */\nconst isDirectorySync = path => {\n    try {\n        const stat = fs.statSync(path);\n        return stat.isDirectory();\n    } catch (e) {\n        if (e.code === 'ENOENT') {\n            return false;\n        }\n        throw e;\n    }\n};\n\n/**\n * @param {NestedRecord<string, string>} messages\n * @returns {Record<string, string>}\n */\nconst generateSmallestLocaleNamesMap = messages => {\n    const lowercaseSupportedLocales = {};\n    for (const [locale, value] of Object.entries(supportedLocales)) {\n        lowercaseSupportedLocales[locale.toLowerCase()] = value;\n    }\n    const result = {\n        [SOURCE_LOCALE]: supportedLocales[SOURCE_LOCALE].name\n    };\n    for (const locale of Object.keys(messages)) {\n        result[locale] = lowercaseSupportedLocales[locale].name;\n    }\n    return result;\n};\n\nconst pullGui = async () => {\n    const scratchGui = pathUtil.join(__dirname, '../../scratch-gui');\n    if (!isDirectorySync(scratchGui)) {\n        console.log('Skipping editor; could not find scratch-gui.');\n        return;\n    }\n\n    const guiTranslationsFile = pathUtil.join(scratchGui, 'src/lib/tw-translations/generated-translations.json');\n    // These translations build upon scratch-l10n, so the threshold should be 0.\n    const guiTranslations = await pullResource('guijson', 0);\n    fs.writeFileSync(guiTranslationsFile, JSON.stringify(guiTranslations, null, 4));\n\n    const addonsTranslationsFile = pathUtil.join(scratchGui, 'src/addons/settings/translations.json');\n    const addonsTranslations = await pullResource('addonsjson', 0.7);\n    fs.writeFileSync(addonsTranslationsFile, JSON.stringify(addonsTranslations, null, 4));\n};\n\nconst pullPackager = async () => {\n    const packager = pathUtil.join(__dirname, '../../packager');\n    if (!isDirectorySync(packager)) {\n        console.log('Skipping packager; could not find packager.');\n        return;\n    }\n\n    const translations = await pullResource('packagerjson', 0.5);\n\n    // Delete old JSON files. Some languages that were previously supported might no longer be.\n    const localesDirectory = pathUtil.join(packager, 'src', 'locales');\n    for (const name of fs.readdirSync(localesDirectory)) {\n        if (name.endsWith('.json') && name !== 'en.json') {\n            fs.unlinkSync(pathUtil.join(localesDirectory, name));\n        }\n    }\n\n    // Write the individual JSON files\n    for (const [locale, messages] of Object.entries(translations)) {\n        const path = pathUtil.join(localesDirectory, `${locale}.json`);\n        fs.writeFileSync(path, JSON.stringify(messages, null, 4));\n    }\n\n    // Write the index.js manifest\n    const index = pathUtil.join(localesDirectory, 'index.js');\n    const oldContent = fs.readFileSync(index, 'utf-8');\n    const newContent = oldContent.replace(/\\/\\*===\\*\\/[\\s\\S]+\\/\\*===\\*\\//m, `/*===*/\\n${\n        Object.keys(translations)\n            .map(i => `  ${JSON.stringify(i)}: () => require(${JSON.stringify(`./${i}.json`)})`)\n            .join(',\\n')\n    },\\n  /*===*/`);\n    fs.writeFileSync(index, newContent);\n\n    // Write locale-names.json\n    const localeNames = generateSmallestLocaleNamesMap(translations);\n    fs.writeFileSync(pathUtil.join(localesDirectory, 'locale-names.json'), JSON.stringify(localeNames, null, 4));\n};\n\nconst pullDesktop = async () => {\n    const desktop = pathUtil.join(__dirname, '../../turbowarp-desktop');\n    if (!isDirectorySync(desktop)) {\n        console.log('Skipping desktop; could not find turbowarp-desktop.');\n        return;\n    }\n\n    // Desktop app translations\n    const desktopTranslations = await pullResource('desktopnewjson', 0.5);\n    fs.writeFileSync(\n        pathUtil.join(desktop, 'src-main/l10n/generated-translations.json'),\n        JSON.stringify(desktopTranslations, null, 4)\n    );\n\n    // Website translations\n    const webTranslations = await pullResource('desktopturbowarporg-redesign', 0.7);\n    const localeNames = generateSmallestLocaleNamesMap(webTranslations);\n    const indexHtml = pathUtil.join(desktop, 'docs', 'index.html');\n    const oldContent = fs.readFileSync(indexHtml, 'utf-8');\n    const newContent = oldContent\n        .replace(\n            / *<!-- L10N_START -->[\\s\\S]*?<!-- L10N_END -->/gm,\n            [\n                '<!-- L10N_START -->',\n                ...Object.entries(webTranslations).map(([locale, data]) => (\n                    `<script type=\"generated-translations\" data-locale=\"${locale}\">${JSON.stringify(data)}</script>`\n                )),\n                '<!-- L10N_END -->'\n            ].map(line => `    ${line}`).join('\\n')\n        )\n        .replace(\n            /<script type=\"generated-locale-names\">[\\s\\S]+?<\\/script>/,\n            `<script type=\"generated-locale-names\">${JSON.stringify(localeNames)}</script>`\n        );\n    fs.writeFileSync(indexHtml, newContent);\n\n    const storeListings = await pullResource('store-listingsyaml', 1);\n    fs.writeFileSync(\n        pathUtil.join(desktop, 'store-listings/imported.json'),\n        JSON.stringify(storeListings, null, 4)\n    );\n};\n\nconst pullExtensions = async () => {\n    const extensions = pathUtil.join(__dirname, '../../extensions');\n    if (!isDirectorySync(extensions)) {\n        console.log('Skipping extensions; could not find extensions.');\n        return;\n    }\n\n    const metadataTranslations = await pullResource('extension-metadata', 0);\n    fs.writeFileSync(\n        pathUtil.join(extensions, 'translations/extension-metadata.json'),\n        JSON.stringify(metadataTranslations, null, 4)\n    );\n\n    const runtimeTranslations = await pullResource('extensions', 0);\n    fs.writeFileSync(\n        pathUtil.join(extensions, 'translations/extension-runtime.json'),\n        JSON.stringify(runtimeTranslations, null, 4)\n    );\n};\n\nconst pullEverything = async () => {\n    try {\n        console.log('DOWNLOADING from Transifex...');\n        await pullGui();\n        await pullPackager();\n        await pullDesktop();\n        await pullExtensions();\n    } catch (e) {\n        console.error(e);\n        process.exit(1);\n    }\n};\n\npullEverything();\n"],"mappings":"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","ignoreList":[]}},"mtime":1713531134916}}